{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","saveToState","e","setState","target","name","value","SendForm","a","data","username","state","email","password","fetch","method","mode","credentials","headers","body","response","json","string","JSON","stringyfy","console","log","htmlFor","type","id","onChange","this","onClick","LogOut","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAEqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,YAAc,SAACC,GACX,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAM,CAACH,EAAEE,OAAOE,UAV1B,EAalBC,SAbkB,sBAaP,kCAAAC,EAAA,6DAEFC,EAAO,CAETC,SAAU,EAAKC,MAAMC,MACrBC,SAAU,EAAKF,MAAME,UALjB,SAQcC,MAAM,sCAAuC,CAC/DC,OAAQ,OACRC,KAAM,UACNC,YAAa,UACbC,QAAS,CACT,eAAgB,oBAEhBC,KAAMV,IAfF,cAQJW,EARI,gBAiBWA,EAASC,OAjBpB,OAiBFA,EAjBE,OAkBFC,EAASC,KAAKC,UAAUH,GAC9BI,QAAQC,IAAI,CAACJ,WACbG,QAAQC,IAAI,CAACL,SApBL,4CAXR,EAAKV,MAAQ,CACTC,MAAO,GACPC,SAAU,IAJC,E,sEAqCf,OACI,6BACI,2BAAOc,QAAQ,IAAf,QAEX,2BAAOC,KAAK,QAAQvB,KAAK,QAAQwB,GAAG,GAAGC,SAAUC,KAAK9B,eAE3C,2BAAO0B,QAAQ,IAAf,WAEX,2BAAOC,KAAK,WAAWvB,KAAK,WAAWwB,GAAG,GAAGC,SAAUC,KAAK9B,eAEjD,2BAAO0B,QAAQ,IAAf,QACX,2BAAOC,KAAK,SAAStB,MAAM,QAAQ0B,QAASD,KAAKxB,YAEtC,2BAAOoB,QAAQ,IAAf,SACX,2BAAOC,KAAK,SAAStB,MAAM,SAAS0B,QAASD,KAAKE,e,GApDrBC,a,MCUnBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a9fe123.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n        }\n\n    }\n\n    saveToState = (e) => {\n        this.setState({[e.target.name]:[e.target.value]});\n    }\n\n     SendForm = async () => {\n        \n        const data = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password,  \n        };\n\n      const response =  await fetch('https://prelude.eurobrake.net/login', {\n            method: 'post',\n            mode: 'no-cors',\n            credentials: 'include',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: data\n        });\n        const json = await response.json();\n        const string = JSON.stringyfy(json);\n        console.log({string})\n        console.log({json})\n    }\n\n    render() {\n        return (\n            <div>\n                <label htmlFor=\"\">\n                    Email\n     <input type=\"email\" name=\"email\" id=\"\" onChange={this.saveToState}/>\n                </label>\n                <label htmlFor=\"\">\n                    Password\n     <input type=\"password\" name=\"password\" id=\"\" onChange={this.saveToState}/>\n                </label>\n                <label htmlFor=\"\">Login\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm}/>               \n                </label>\n                <label htmlFor=\"\">Logout\n     <input type=\"submit\" value=\"Logout\" onClick={this.LogOut}/>               \n                </label>\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport Form from './Components/Form'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}