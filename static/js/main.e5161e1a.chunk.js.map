{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","saveToState","e","setState","target","name","value","SendEG0","fetch","method","body","JSON","stringify","username","password","then","resp","json","response","console","info","SendEG","SendForm","form","state","email","data","log","catch","error","SendForm2","a","formData","credentials","myJson","SendForm3","SendForm4","SendForm5","mode","Logout","htmlFor","type","id","onChange","this","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5161e1a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\n\nexport default class Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: 'd.hardiman@fisita.com',\n            password: 'fisita',\n        }\n\n    }\n\n    saveToState = (e) => {\n        this.setState({ [e.target.name]: [e.target.value] });\n    }\n    \n    \n    SendEG0 = () => {\n        const data = {\n            username: 'd.hardiman@fisita.com',\n            password: 'fisita'\n        };\n        const endpoint = 'https://prelude.eurobrake.net/login';\n\n        fetch(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n            .then((resp) => resp.json())\n            .then(function (response) {\n                console.info('fetch()', response);\n                return response;\n            });\n    }\n\n    \n    SendEG = () => {\n        const data = {\n            username: 'd.hardiman@fisita.com',\n            password: 'fisita'\n        };\n        const endpoint = 'https://prelude.eurobrake.net/login';\n\n        fetch(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n            .then((resp) => resp.json())\n            .then(function (response) {\n                console.info('fetch()', response);\n                return response;\n            });\n    }\n\n    SendForm = () => {\n        const url = 'https://prelude.eurobrake.net/login'\n        const form = { username: this.state.email, password: this.state.password };\n        fetch(url, {\n            method: 'POST',\n         \n         \n          \n            body: JSON.stringify(form)\n        })\n            .then(resp => resp.json())\n            .then(data => console.log(JSON.stringify(data)))\n            .catch(error => console.log(error));\n\n    }\n\n    SendForm2 = async () => {\n        const formData = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password\n        };\n\n        const url = 'https://prelude.eurobrake.net/login'\n        const resp =\n            await fetch(url, {\n                method: 'POST',\n                credentials: 'include',\n                body: JSON.stringify(formData)\n            })\n        const myJson = await resp.json();\n        // const data = \n        // response instanceof Error ? console.log('Error!!!' + Error) : \n        const data = JSON.stringify(myJson);\n        console.log(data)\n    }\n\n\n    SendForm3 = async () => {\n        const formData = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password\n        };\n\n        const url = 'https://prelude.eurobrake.net/login'\n        const resp = await fetch(url, {\n            method: 'put',\n           \n           \n            body: JSON.stringify(formData)\n        })\n        const myJson = await resp.json();\n        // const data = \n        // response instanceof Error ? console.log('Error!!!' + Error) : \n        const data = JSON.stringify(myJson);\n        console.log(data)\n    }\n    SendForm4 = async () => {\n        const formData = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password\n        };\n\n        const url = 'https://prelude.eurobrake.net/author';\n        const resp =\n            await fetch(url, {\n                method: 'post',\n              \n            \n                body: JSON.stringify(formData)\n            })\n        const myJson = await resp.json();\n        // const data = \n        // response instanceof Error ? console.log('Error!!!' + Error) : \n        const data = JSON.stringify(myJson);\n        console.log(data)\n    }\n    SendForm5 = async () => {\n        const formData = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password\n        };\n\n        const url = 'https://prelude.eurobrake.net/author';\n        const resp =\n            await fetch(url, {\n                method: 'post',\n                mode: 'no-cors',\n                credentials: 'include',\n                body: JSON.stringify(formData)\n            })\n        const myJson = await resp.json();\n        // const data = \n        // response instanceof Error ? console.log('Error!!!' + Error) : \n        const data = JSON.stringify(myJson);\n        console.log(data)\n    }\n    Logout = async () => {\n        const formData = {\n            // go: 'commit',\n            username: this.state.email,\n            password: this.state.password\n        };\n        const resp =\n            await fetch('https://prelude.eurobrake.net/logout', { credentials: 'include'})\n           \n        console.log(resp)\n    }\n\n\n    render() {\n        return (\n            <div>\n\n\n                <label htmlFor=\"\">\n                    Email\n     <input type=\"email\" name=\"email\" id=\"email\" onChange={this.saveToState} />\n                </label>\n                <label htmlFor=\"\">\n                    Password\n     <input type=\"password\" name=\"password\" id=\"password\" onChange={this.saveToState} />\n                </label>\n                <label htmlFor=\"\">EG0\n     <input type=\"submit\" value=\"Login\" onClick={this.SendEG0} />\n                </label>\n                <label htmlFor=\"\">EG\n     <input type=\"submit\" value=\"Login\" onClick={this.SendEG} />\n                </label>\n                <label htmlFor=\"\">Login\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm} />\n                </label>\n                <label htmlFor=\"\">Login2\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm2} />\n                </label>\n                <label htmlFor=\"\">put - no headers, cors or creden \n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm3} />\n                </label>\n                <label htmlFor=\"\">auth\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm4} />\n                </label>\n                <label htmlFor=\"\">auth0head\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm5} />\n                </label>\n                <label htmlFor=\"\">Logout\n     <input type=\"submit\" value=\"Logout\" onClick={this.Logout} />\n                </label>\n\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport Form from './Components/Form';\n// import Signup from './Components/Signup';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n      {/* <Signup/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}