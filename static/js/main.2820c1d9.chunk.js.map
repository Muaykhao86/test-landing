{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","Form","props","saveToState","e","setState","target","name","value","SendForm","data","username","state","email","password","fetch","method","mode","credentials","headers","body","JSON","stringify","then","response","json","stringyfy","catch","error","console","log","SendForm2","a","url","withCredentials","htmlFor","type","id","onChange","this","onClick","LogOut","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAEMA,EAAQC,EAAQ,IAEDC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,YAAc,SAACC,GACX,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAM,CAACH,EAAEE,OAAOE,UAV1B,EAalBC,SAAY,WAET,IAAMC,EAAO,CAGTC,SAAU,EAAKC,MAAMC,MACrBC,SAAU,EAAKF,MAAME,UAG3BC,MAAM,sCAAuC,CACvCC,OAAQ,OACRC,KAAM,UACNC,YAAa,UACbC,QAAS,CACT,eAAgB,oBAEhBC,KAAMC,KAAKC,UAAUZ,KAExBa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GAAI,OAAIW,KAAKK,UAAUhB,MAC5BiB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC5BC,QAAQC,IAAIpB,IAlCG,EAqClBqB,UArCkB,sBAqCN,4BAAAC,EAAA,sDACHtB,EAAO,CAGTC,SAAU,EAAKC,MAAMC,MACrBC,SAAU,EAAKF,MAAME,UAGzBf,EAAM,CACFiB,OAAQ,OACRiB,IAAK,sCACLC,gBAAiB,OAEjBxB,KAAM,CACFA,UAGLa,MAAK,SAAAC,GAAQ,OAAIK,QAAQC,IAAIN,MAC7BG,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAnBP,2CAnCT,EAAKhB,MAAQ,CACTC,MAAO,wBACPC,SAAU,UAJC,E,sEA8Df,OACI,6BACI,2BAAOqB,QAAQ,IAAf,QAEX,2BAAOC,KAAK,QAAQ7B,KAAK,QAAQ8B,GAAG,QAAQC,SAAUC,KAAKpC,eAEhD,2BAAOgC,QAAQ,IAAf,WAEX,2BAAOC,KAAK,WAAW7B,KAAK,WAAW8B,GAAG,WAAWC,SAAUC,KAAKpC,eAEzD,2BAAOgC,QAAQ,IAAf,QACX,2BAAOC,KAAK,SAAS5B,MAAM,QAAQgC,QAASD,KAAK9B,YAEtC,2BAAO0B,QAAQ,IAAf,SACX,2BAAOC,KAAK,SAAS5B,MAAM,QAAQgC,QAASD,KAAKR,aAEtC,2BAAOI,QAAQ,IAAf,SACX,2BAAOC,KAAK,SAAS5B,MAAM,SAASgC,QAASD,KAAKE,e,GAhFrBC,a,MCQnBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.2820c1d9.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst axios = require('axios');\n\nexport default class Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: 'd.hardiman@fisita.com',\n            password: 'fisita',\n        }\n\n    }\n\n    saveToState = (e) => {\n        this.setState({[e.target.name]:[e.target.value]});\n    }\n\n     SendForm =  () => {\n        \n        const data = {\n            // go: 'commit',\n           \n            username: this.state.email,\n            password: this.state.password,  \n        };\n\n      fetch('https://prelude.eurobrake.net/login', {\n            method: 'post',\n            mode: 'no-cors',\n            credentials: 'include',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then(response => response.json())\n        .then(data => JSON.stringyfy(data))\n        .catch(error => console.log(error));\n        console.log(data)\n    }\n\n     SendForm2 = async () => {\n        const data = {\n            // go: 'commit',\n           \n            username: this.state.email,\n            password: this.state.password,  \n        };\n\n        axios({\n            method: 'post',\n            url: 'https://prelude.eurobrake.net/login',\n            withCredentials: 'true',\n            \n            data: {\n                data\n            }\n          })\n          .then(response => console.log(response))\n          .catch(function (error) {\n            console.log(error);\n          });\n     }\n\n\n    render() {\n        return (\n            <div>\n                <label htmlFor=\"\">\n                    Email\n     <input type=\"email\" name=\"email\" id=\"email\" onChange={this.saveToState}  />\n                </label>\n                <label htmlFor=\"\">\n                    Password\n     <input type=\"password\" name=\"password\" id=\"password\" onChange={this.saveToState}/>\n                </label>\n                <label htmlFor=\"\">Login\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm}/>               \n                </label>\n                <label htmlFor=\"\">Login2\n     <input type=\"submit\" value=\"Login\" onClick={this.SendForm2}/>               \n                </label>\n                <label htmlFor=\"\">Logout\n     <input type=\"submit\" value=\"Logout\" onClick={this.LogOut}/>               \n                </label>\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport Form from './Components/Form'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}